The Goal:
The repo uses:
Travis-ci for testing and releases
Code climate for quality monitoring
github for code storage
electron-builder
nyc for coverage stats
mocha (just cause - should probably be jest)

-- and --
When travis sucessfully passes on master
Semantic release creates a new auto-versioned release and
publishes signed assets generated by electron-build for installation and autoUpdate
Installed electon apps will automatically update on restart.

1. node modules - all  --save-dev
  nyc
  @babel/register
  semantic-release
  @semantic-release/git
  @semantic-relase/exec
  babel-plugin-istanbul
  electron-builder

(I'm assuming all the electron/bable bs is handled aready)

2 nyc

add this to package json root

[.nycrc]-------------------------------------------------------------------------------
{
  "require": [
    "@babel/register"
  ],
  "include": [
    "app/**/*.js*"
  ],
  "all": true,
  "reporter": [
    "lcov",
  "text"
  ],
  "sourceMap": false,
  "instrument": false,
  "all": true,
  "cache": true,
  "extension": [
    "jsx"
  ]
}
-----------------------------------------------------------------------------------------

3. GitHub

- Create a deploy user and give it read/write acces to the repo.
Create Personal access token for the deploy user (I call it TRAVIS_CI so I know where it is used.

(keep that token handy - you will not be able to retrieve it once it is off the screen)

2. Code Climate
grap the TEST REPORTER ID from code climate repository settings test coverage

3. Travis - part one

Join travis with your normal github account and:
Add .travis.yml to your repo:

Something like: (more edits ot this later to get signing/release automated)
[.travis.yml]-------------------------------------------------------------------------------------
sudo: false
language: node_js
node_js:
  - '10'

os: osx

install:
  - yarn install

before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

script
- NODE_ENV=test nyc mocha

after_script:
  - ./cc-test-reporter after-build -t lcov --debug --exit-code $TRAVIS_TEST_RESULT

-----------------------------------------------------------------------------------------------------

Add two environment variables to the repo settings on travis:

GH_TOKEN env variable with the value of the TRAVIS_CI personal access token you make on github

CC_TEST_REPORTER_ID env variable with the value of the TEST REPORTER ID from code clmate

Now push something up (with some kind of test) to see if travis does its thing.

You should now have the following:
travis-ci building
code-climate quality and coverage metrics

4. code signing - Certificate generation, export and encoding

In order to distribute outside of app store, and for autoUpdates to work - we need to sign the osx build with "Developer ID Application" certs.
Have fun giving Apple $100 a year for the priviledge. - once you have created your paid developer account generate the Developer ID Application in XCODE->Preferences->Accounts
Right click the cert as application.p12 - you will need to provide a password - remember it

We dont want to add the certs to our repo (duh) so use the command line to convert the cert to base64 for storage on travis-ci as env variables
run the following on the command line and copy the ouput
base64 application.p12

5. Travis - part 2

- Create an environment variable CERT_OSXDEVELOPER_ID_APPLICATION with the text copied from 4 above.
- Create an environment variable CERT_PASS with the password you used to export Developer ID Application (dont worry - it is encrypted on travis)

We need to get that cert into an accessible keychain that can run codesign without user interaction:

[scripts/keychain.sh]--------------------------------------------------------------------------------
#!/bin/sh

KEY_CHAIN=mac-build.keychain
security create-keychain -p $CERT_PASS $KEY_CHAIN

# Make the keychain the default so identities are found
security default-keychain -s $KEY_CHAIN

# Unlock the keychain
security unlock-keychain -p $CERT_PASS $KEY_CHAIN

# Set keychain locking timeout to 3600 seconds
security set-keychain-settings -t 3600 -u $KEY_CHAIN

export APPLICATION_CERT=Applciation.p12
echo $CERT_OSX_DEVELOPER_ID_APPLICATION | base64 - --decode > $APPLICATION_CERT

# Add certificates to keychain and allow codesign to access them
echo "Add certificate to keychain"
security import $APPLICATION_CERT -k $KEY_CHAIN -P $CERT_PASS -T /usr/bin/codesign

echo "Add keychain to keychain-list"
security list-keychains -d user -s $KEY_CHAIN

echo "Settting key partition list"
security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $CERT_PASS $KEY_CHAIN
------------------------------------------------------------------------------------------------------

make that executable and add the following to .travis.yml

[.travis.yml]-----------------------------------------------------------------------------------------
before_deploy:
  - scripts/keychain.sh
------------------------------------------------------------------------------------------------------

6. semantic-release

first the configuration:
------------------------------------------------------------------------------------------------------
[.releaserc.json]
{
  "branch": "master",
  "repositoryUrl": "https://copios-deploy@github.com/copios-jp/red-falcon.git",
  "debug": true,
  "plugins": [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    ["@semantic-release/exec", {
      "prepareCmd": "npm version ${nextRelease.version} --no-git-tag-version",
      "publishCmd": "yarn run pack"
    }],
    ["@semantic-release/git", {
      "assets": ["package.json"],
      "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
    }],
    ["@semantic-release/github",
      {
        "assets": [
          {
            "path": "dist/*.dmg"
          },
          {
            "path": "dist/latest-mac.yml"
          },
          {
            "path": "dist/*.dmg.blockmap"
          },
          {
            "path": "dist/*.yml"
          },
          {
            "path": "dist/*.zip"
          }
        ]
      }
    ]
  ]
}
----------------------------------------------------------------------------------------------------------

Important things here are:
 - make sure the deploy user's id is in the repository url because the GH_TOKEN belongs to them
 - we use npm [NOT YARN] to update the package.json version (which in turn updates the exectron app version)
 - yarn pack is going to clean the build directory, babel up the app and create/sign electron-builder mac assets
 - release/git is going to update the package json in our repo (still not sure we really need this step...)
 - release/github is going to create the realase and add our signed assets for the electron app

7. electron-builder config
Add the following to your electron-builder config
[.electron-builder.yml]-----------------------------------------------------------------------------------
electronUpdaterCompatibility: '>= 4.0.4'

publish:
  provider: github
  owner: copios-jp
  private: false
----------------------------------------------------------------------------------------------------------

This is how client apps know to look on github for new releases.

8. MOAR TRAVIS

Now we are ready to add the following to .travis.yml
[.travis.yml] --------------------------------------------------------------------------------------------

branches:
  except:
    - /^v\d+\.\d+\.\d+$/


deploy:
  - provider: script
    skip_cleanup: true
    script:
      - semantic-release
-----------------------------------------------------------------------------------------------------------

8. Auto Updates

At a minimum we need this in  our main electron process
[app/main/index.js]----------------------------------------------------------------------------------------
app.on('ready', () => {
  autoUpdater.checkForUpdatesAndNotify()
})
-----------------------------------------------------------------------------------------------------------

Now when you push to master, and it is not a tag, with commits that would generate a release:

1. test get run, and generate coverage stats
2. coverage stats are send off to code climate
3. OSX signing certificates are added to the keychain
4. A new release version is idenfied and release notes are generated from commit mesages via semantic-release.
5. electron-builder builds and signs the app for OSX
6. A new release is created on github and the electron assets are published.
7. *** and this is the jelly ***  User installed versions of our app will automatically download updates run them on restart.
(might be nice to let them know when the update has been downloaded so they know to restart - but that is for later)

Other stuff:
electron-builder can also handle publishing to github as releases but it is neither automated nor CI dependent
so I am not using it.

THIS WAS A HUGE PAIN IN THE ASS to tie together

Summary Files:

[.releaserc.json]---------------------------------------------------------------------------------------------
{
  "branch": "master",
  "repositoryUrl": "https://copios-deploy@github.com/copios-jp/red-falcon.git",
  "debug": true,
  "plugins": [
    "@semantic-release/commit-analyzer",
    "@semantic-release/release-notes-generator",
    ["@semantic-release/exec", {
      "prepareCmd": "npm version ${nextRelease.version} --no-git-tag-version",
      "publishCmd": "yarn run pack"
    }],
    ["@semantic-release/git", {
      "assets": ["package.json"],
      "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
    }],
    ["@semantic-release/github",
      {
        "assets": [
          {
            "path": "dist/*.dmg"
          },
          {
            "path": "dist/latest-mac.yml"
          },
          {
            "path": "dist/*.dmg.blockmap"
          },
          {
            "path": "dist/*.yml"
          },
          {
            "path": "dist/*.zip"
          }
        ]
      }
    ]
  ]
}
-------------------------------------------------------------------------------------------------------------------

[.travis.yml]------------------------------------------------------------------------------------------------------
sudo: false
language: node_js
node_js:
  - '10'

os: osx

install:
  - yarn install

before_script:
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

script:
- yarn run check-format
- yarn run lint
- NODE_ENV=test nyc mocha

branches:
  except:
    - /^v\d+\.\d+\.\d+$/

after_script:
  - ./cc-test-reporter after-build -t lcov --debug --exit-code $TRAVIS_TEST_RESULT


before_deploy:
  - scripts/keychain.sh

deploy:
  - provider: script
    skip_cleanup: true
    script:
      - semantic-release
-------------------------------------------------------------------------------------------------------------------

[electron-builder.yml]---------------------------------------------------------------------------------------------
appId: jp.co.copios.red-falcon
copyright: Copyright @ 2018 ${author}
productName: HeartLimit

asar: true

directories:
  buildResources: dist-assets/
  output: dist/

files:
  - package.json
  - init.js
  - build/
  - node_modules/

dmg:
  contents:
    - type: link
      path: /Applications
      x: 410
      y: 150
    - type: file
      x: 130
      y: 150

mac:
  category: public.app-category.healthcare-fitness

electronUpdaterCompatibility: '>= 4.0.4'

publish:
  provider: github
  owner: copios-jp
  private: false
----------------------------------------------------------------------------------------------------------------------

[scripts/keychain.sh]-------------------------------------------------------------------------------------------------
#!/bin/sh

KEY_CHAIN=mac-build.keychain
security create-keychain -p $CERT_PASS $KEY_CHAIN

# Make the keychain the default so identities are found
security default-keychain -s $KEY_CHAIN

# Unlock the keychain
security unlock-keychain -p $CERT_PASS $KEY_CHAIN

# Set keychain locking timeout to 3600 seconds
security set-keychain-settings -t 3600 -u $KEY_CHAIN

export APPLICATION_CERT=Applciation.p12
echo $CERT_OSX_DEVELOPER_ID_APPLICATION | base64 - --decode > $APPLICATION_CERT

# Add certificates to keychain and allow codesign to access them
echo "Add certificate to keychain"
security import $APPLICATION_CERT -k $KEY_CHAIN -P $CERT_PASS -T /usr/bin/codesign

echo "Add keychain to keychain-list"
security list-keychains -d user -s $KEY_CHAIN

echo "Settting key partition list"
security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $CERT_PASS $KEY_CHAIN

---------------------------------------------------------------------------------------------------------------------
